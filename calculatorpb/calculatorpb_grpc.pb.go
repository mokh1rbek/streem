// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: calculatorpb/calculatorpb.proto

package calculatorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculatorServiseClient is the client API for CalculatorServise service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorServiseClient interface {
	SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error)
	PerfectNumber(ctx context.Context, in *PerfectNumberRequest, opts ...grpc.CallOption) (CalculatorServise_PerfectNumberClient, error)
	TotalNumber(ctx context.Context, opts ...grpc.CallOption) (CalculatorServise_TotalNumberClient, error)
	FindMinimum(ctx context.Context, opts ...grpc.CallOption) (CalculatorServise_FindMinimumClient, error)
}

type calculatorServiseClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorServiseClient(cc grpc.ClientConnInterface) CalculatorServiseClient {
	return &calculatorServiseClient{cc}
}

func (c *calculatorServiseClient) SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error) {
	out := new(SquareRootResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorServise/SquareRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiseClient) PerfectNumber(ctx context.Context, in *PerfectNumberRequest, opts ...grpc.CallOption) (CalculatorServise_PerfectNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorServise_ServiceDesc.Streams[0], "/calculator.CalculatorServise/PerfectNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServisePerfectNumberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorServise_PerfectNumberClient interface {
	Recv() (*PerfectNumberResponse, error)
	grpc.ClientStream
}

type calculatorServisePerfectNumberClient struct {
	grpc.ClientStream
}

func (x *calculatorServisePerfectNumberClient) Recv() (*PerfectNumberResponse, error) {
	m := new(PerfectNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiseClient) TotalNumber(ctx context.Context, opts ...grpc.CallOption) (CalculatorServise_TotalNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorServise_ServiceDesc.Streams[1], "/calculator.CalculatorServise/TotalNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiseTotalNumberClient{stream}
	return x, nil
}

type CalculatorServise_TotalNumberClient interface {
	Send(*TotalNumberRequest) error
	CloseAndRecv() (*TotalNumberResponse, error)
	grpc.ClientStream
}

type calculatorServiseTotalNumberClient struct {
	grpc.ClientStream
}

func (x *calculatorServiseTotalNumberClient) Send(m *TotalNumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiseTotalNumberClient) CloseAndRecv() (*TotalNumberResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TotalNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiseClient) FindMinimum(ctx context.Context, opts ...grpc.CallOption) (CalculatorServise_FindMinimumClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorServise_ServiceDesc.Streams[2], "/calculator.CalculatorServise/FindMinimum", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiseFindMinimumClient{stream}
	return x, nil
}

type CalculatorServise_FindMinimumClient interface {
	Send(*FindMinimumRequest) error
	Recv() (*FindMinimumResponse, error)
	grpc.ClientStream
}

type calculatorServiseFindMinimumClient struct {
	grpc.ClientStream
}

func (x *calculatorServiseFindMinimumClient) Send(m *FindMinimumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiseFindMinimumClient) Recv() (*FindMinimumResponse, error) {
	m := new(FindMinimumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServiseServer is the server API for CalculatorServise service.
// All implementations must embed UnimplementedCalculatorServiseServer
// for forward compatibility
type CalculatorServiseServer interface {
	SquareRoot(context.Context, *SquareRootRequest) (*SquareRootResponse, error)
	PerfectNumber(*PerfectNumberRequest, CalculatorServise_PerfectNumberServer) error
	TotalNumber(CalculatorServise_TotalNumberServer) error
	FindMinimum(CalculatorServise_FindMinimumServer) error
	mustEmbedUnimplementedCalculatorServiseServer()
}

// UnimplementedCalculatorServiseServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiseServer struct {
}

func (UnimplementedCalculatorServiseServer) SquareRoot(context.Context, *SquareRootRequest) (*SquareRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SquareRoot not implemented")
}
func (UnimplementedCalculatorServiseServer) PerfectNumber(*PerfectNumberRequest, CalculatorServise_PerfectNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method PerfectNumber not implemented")
}
func (UnimplementedCalculatorServiseServer) TotalNumber(CalculatorServise_TotalNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method TotalNumber not implemented")
}
func (UnimplementedCalculatorServiseServer) FindMinimum(CalculatorServise_FindMinimumServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMinimum not implemented")
}
func (UnimplementedCalculatorServiseServer) mustEmbedUnimplementedCalculatorServiseServer() {}

// UnsafeCalculatorServiseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServiseServer will
// result in compilation errors.
type UnsafeCalculatorServiseServer interface {
	mustEmbedUnimplementedCalculatorServiseServer()
}

func RegisterCalculatorServiseServer(s grpc.ServiceRegistrar, srv CalculatorServiseServer) {
	s.RegisterService(&CalculatorServise_ServiceDesc, srv)
}

func _CalculatorServise_SquareRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiseServer).SquareRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorServise/SquareRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiseServer).SquareRoot(ctx, req.(*SquareRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorServise_PerfectNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PerfectNumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiseServer).PerfectNumber(m, &calculatorServisePerfectNumberServer{stream})
}

type CalculatorServise_PerfectNumberServer interface {
	Send(*PerfectNumberResponse) error
	grpc.ServerStream
}

type calculatorServisePerfectNumberServer struct {
	grpc.ServerStream
}

func (x *calculatorServisePerfectNumberServer) Send(m *PerfectNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorServise_TotalNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiseServer).TotalNumber(&calculatorServiseTotalNumberServer{stream})
}

type CalculatorServise_TotalNumberServer interface {
	SendAndClose(*TotalNumberResponse) error
	Recv() (*TotalNumberRequest, error)
	grpc.ServerStream
}

type calculatorServiseTotalNumberServer struct {
	grpc.ServerStream
}

func (x *calculatorServiseTotalNumberServer) SendAndClose(m *TotalNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiseTotalNumberServer) Recv() (*TotalNumberRequest, error) {
	m := new(TotalNumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorServise_FindMinimum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiseServer).FindMinimum(&calculatorServiseFindMinimumServer{stream})
}

type CalculatorServise_FindMinimumServer interface {
	Send(*FindMinimumResponse) error
	Recv() (*FindMinimumRequest, error)
	grpc.ServerStream
}

type calculatorServiseFindMinimumServer struct {
	grpc.ServerStream
}

func (x *calculatorServiseFindMinimumServer) Send(m *FindMinimumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiseFindMinimumServer) Recv() (*FindMinimumRequest, error) {
	m := new(FindMinimumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServise_ServiceDesc is the grpc.ServiceDesc for CalculatorServise service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculatorServise_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalculatorServise",
	HandlerType: (*CalculatorServiseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SquareRoot",
			Handler:    _CalculatorServise_SquareRoot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PerfectNumber",
			Handler:       _CalculatorServise_PerfectNumber_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TotalNumber",
			Handler:       _CalculatorServise_TotalNumber_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindMinimum",
			Handler:       _CalculatorServise_FindMinimum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculatorpb/calculatorpb.proto",
}
